<!DOCTYPE html>
<html>
<head>
    <title>Printing Portfolio Tree</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Feb 23 2015 16:20:36 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Feb 23 2015 16:20:36 GMT-0800 (PST)";
        var CHECKSUM = 2157475690;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define( 'Rally.technicalservices.gridboard.Gridboard', {
    extend: 'Rally.ui.gridboard.GridBoard',
    alias: 'widget.tsgridboard',
    cls: 'rui-gridboard',
    items: [
        {
            itemId: 'header',
            xtype: 'rallyleftright',
            padding: '4 10',
            overflowX: 'hidden'
        }
    ]
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        var models = ['portfolioitem/feature','userstory'];
        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: ['portfolioitem/feature'] ,
            autoLoad: true,
            enableHierarchy: true,
            
            _getStoreTypePaths: function() {
                return ['portfolioitem/feature','hierarchicalrequirement'];
            }
        }).then({
            scope: this,
            success: function(store) {
                this.down('#display_box').add({
                    xtype: 'tsgridboard',
                    context: this.getContext(),
                    modelNames: models,
                    toggleState: 'grid',
                    plugins: [
                        {
                            ptype: 'rallygridboardcustomfiltercontrol',
                            filterControlConfig: {
                                modelNames: ['portfolioitem/feature'],
                                stateful: true,
                                stateId: this.context.getScopedStateId('ts-printer-board')
                            },
                            showOwnerFilter: true,
                            ownerFilterControlConfig: {
                                stateful: true,
                                stateId: this.context.getScopedStateId('ts-printer-board')
                            }
                        },
                        {
                            ptype: 'rallygridboardactionsmenu',
                            menuItems: [
                                {
                                    text: 'Export...',
                                    handler: function() {
                                        window.location = Rally.ui.grid.GridCsvExport.buildCsvExportUrl(
                                            this.down('rallygridboard').getGridOrBoard());
                                    },
                                    scope: this
                                },
                                {
                                    text: 'Print Selected Stories...',
                                    handler: function() {
                                        var gridorboard = this.down('rallygridboard').getGridOrBoard();
                                        this._getSelectedStories( gridorboard ).then({
                                            scope: this,
                                            success: function(stories){
                                                Ext.Array.each(stories,function(story){
                                                    console.log(story.get('FormattedID'));
                                                });
                                            },
                                            failure: function(msg) {
                                                alert(msg);
                                            }
                                        });
                                        
                                    },
                                    scope: this
                                }
                            ],
                            buttonConfig: {
                                iconCls: 'icon-export'
                            }
                        }
                    ],
                    cardBoardConfig: {
                        attribute: 'State'
                    },
                    gridConfig: {
                        store: store,
                        columnCfgs: [
                              'Name',
                              'State',
                              'Owner'
                        ]
                    },
                    height: this.getHeight()
                  });
              }
          });
    },
    _getSelectedStories: function( gridorboard ) {
        var deferred = Ext.create('Deft.Deferred');

        var selected_items = gridorboard.getSelModel().getSelection();
        
        var promises = [];
        var stories = [];
        
        Ext.Array.each(selected_items, function(selected_item){
            var type = selected_item.get('_type');
            if ( type == 'hierarchicalrequirement' ) {
                stories.push(selected_item);
            } else {
                promises.push(this._getChildItems(selected_item));
            }
        },this);
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(child_stories){
                var fids_returned = [];
                var stories_to_return = [];
                
                Ext.Array.each(stories,function(story){
                    fids_returned.push(story.get('FormattedID'));
                    stories_to_return.push(story);
                });
                
                Ext.Array.each(Ext.Array.flatten(child_stories),function(story){
                    if ( Ext.Array.indexOf(fids_returned, story.get('FormattedID')) == -1 ) {
                        fids_returned.push(story.get('FormattedID'));
                        stories_to_return.push(story);
                    }
                });
                
                deferred.resolve(stories_to_return);
                
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    _getChildItems: function(selected_item){
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'hierarchicalrequirement',
            autoLoad: true,
            filters: [{ property:'PortfolioItem.ObjectID',value:selected_item.get('ObjectID')}],
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Failed to load children for ' + selected_item.get('FormattedID'));
                    }
                }
            }
        });
        return deferred.promise;
    }
});

            
               Rally.launchApp('CustomApp', {
                   name: 'Printing Portfolio Tree'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>