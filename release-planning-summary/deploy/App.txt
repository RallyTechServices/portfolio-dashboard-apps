<!DOCTYPE html>
<html>
<head>
    <title>Release Planning Summary</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Apr 05 2015 18:46:03 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Apr 05 2015 18:46:03 GMT-0700 (PDT)";
        var CHECKSUM = 11677933358;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveTextAsFile: function(textToWrite, fileName, options)
    {
        var options = Ext.merge( { type:'text/plain' }, options);
        
        var textFileAsBlob = new Blob([textToWrite], options);
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = this.destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(grid){
        var deferred = Ext.create('Deft.Deferred');
        var store = grid.getStore();
                
        var columns = grid.columns;
        var column_names = [];
        var headers = [];
        
        var csv = [];
        
        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                column_names.push(column.dataIndex);
                if ( column.csvText ) {
                    headers.push(column.csvText);
                } else {
                    headers.push(column.text);
                }
            }
        });
        
        csv.push('"' + headers.join('","') + '"');
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        }
        
//        store.pageSize = 10000;
//        store.limit = 10000;
        
        var all_records = [];
        store.loadPages({
            callback: function(records) {
                for ( var i=0; i<records.length; i++ ) {
                    var record = records[i];
                    
                    var node_values = [];
                    Ext.Array.each(columns,function(column){
                        if ( column.dataIndex) {
                            var column_name = column.dataIndex;
                            var display_value = record.get(column_name);

                            if ( !column._csvIgnoreRender && column.renderer ) {
                                display_value = column.renderer(display_value,mock_meta_data,record, 0, 0, store, grid.getView());
                            }
                            node_values.push(display_value);
                        } else {
                            var display_value = null;
                            if ( !column._csvIgnoreRender && column.renderer ) {
                                display_value = column.renderer(display_value,mock_meta_data,record,record, 0, 0, store, grid.getView());
                                node_values.push(display_value);
                            }
                        }
                    },this);
                    csv.push('"' + node_values.join('","') + '"');
                }
                
                deferred.resolve( csv.join('\r\n') );
            },
            scope: this
        });
        
        return deferred.promise;
        
    }
    
});
Ext.define("ReleasePlanningSummary", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box',layout: { type: 'hbox'} },
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this._addSelectors(this.down('#selector_box'));
    },
    _addSelectors: function(container) {
        container.add(
        {
            xtype:'rallyreleasecombobox',
            listeners: {
                scope: this,
                change: function(rb, new_value, old_value) {
                    var feature_filter = rb.getQueryFromSelected();
                    var me = this;
                    
                    this.setLoading("Loading Features and Stories");
                    
                    var story_filter = [
                        {property:'Feature.Release.Name',value:rb.getRecord().get('Name')},
                        {property:'DirectChildrenCount',value:0}
                    ];
                    
                    Deft.Promise.all([
                        this._getFeatureStore(feature_filter),
                        this._getStories(story_filter)
                    ]).then({
                        scope: this,
                        success: function(results) {
                            var feature_store = results[0];
                            var stories = results[1];
                            this.grid_store = feature_store;
                            this.setLoading(false);
                            
                            this._displayGrid(this.grid_store,stories);
                        },
                        failure: function(error_message){
                            alert(error_message);
                        }
                    }).always(function() {
                        me.setLoading(false);
                    });
                }
            }
        },
        {
            xtype:'component',
            flex: 1
        },
        {
            xtype:'rallybutton',
            itemId: 'csv_button',
            text: 'Export',
            disabled: true,
            listeners: {
                scope: this,
                click: this._exportToCSV
            }
        }
        );
    },
    
    _getStories: function(filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        this.logger.log("getting stories:",filters);
          
        Ext.create('Rally.data.wsapi.Store', {
            limit:'Infinity',
            model: 'HierarchicalRequirement',
            fetch: ['FormattedID','Feature','ScheduleState','PlanEstimate','Iteration','Release',
                'Name', 'StartDate', 'EndDate','Project','c_RequestedRelease','ReleaseDate'],
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem getting stories: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _getFeatureStore: function(filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var model_name = 'PortfolioItem/Feature',
            field_names = ['FormattedID','Name','Release','UserStories',
                'UnEstimatedLeafStoryCount','LeafStoryPlanEstimateTotal',
                'c_RequestedRelease'];
                        
        this.logger.log("Starting load:",filters);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: field_names,
            pageSize: 25,
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    _displayGrid: function(store,stories){
        var me = this;

        this.down('#display_box').removeAll();
        this.logger.log("Grid:", store, stories);
        
        var stories_by_feature = this._getStoriesByFeature(stories);
        
        this._calculate(store.getRecords(), stories_by_feature);
        
        store.on('load',function(store,records) {
            this._calculate(records,stories_by_feature);
        }, this);
        
        this.columns = [
            {dataIndex: 'FormattedID', text:'id',_csvIgnoreRender: true},
            {dataIndex: "Name", text: "Name",_csvIgnoreRender: true },
            {dataIndex: "c_RequestedRelease", text: "Requested Release"},
            {dataIndex: "Release", text: "Release"},
            {dataIndex: "UserStories", text: "Story Count", align: "right", renderer: function(value,meta_data,record){
                
                if ( !value ) {
                    return 0;
                }
                return value.Count;
            } },
            { dataIndex: "UnEstimatedLeafStoryCount", text: "Unestimated Stories", align: "right"},
            { 
                dataIndex: "LeafStoryPlanEstimateTotal", 
                text: "Total Points",
                renderer: function(value,meta_data,record) {
                    return Ext.util.Format.number(value,'0');
                }
            },
            { text: "Completed Points", align: "right", renderer: function(value,meta_data,record){
                
                if ( !record.get('_stories_done') ) {
                    return "N/A";
                }
                
                var points = 0;
                Ext.Array.each( record.get('_stories_done'), function(story) {
                    var record_points = story.get('PlanEstimate') || 0;
                    points = points + record_points;
                });
                                
                return points;
            }},
            { text: "Remaining Points", align: "right", renderer: function(value,meta_data,record){
                if ( !record.get('_stories_not_done') ) {
                    return "N/A";
                }
                var points = 0;
                Ext.Array.each( record.get('_stories_not_done'), function(story) {
                    var record_points = story.get('PlanEstimate') || 0;
                    points = points + record_points;
                });
                
                return points;
            }},
            { text: "Planned Points", align: "right", renderer: function(value,meta_data,record){
                if ( !record.get('_stories_not_done') ) {
                    return "N/A";
                }
                var points = 0;
                Ext.Array.each( record.get('_stories_not_done'), function(story) {
                    
                    var record_points = story.get('PlanEstimate') || 0;
                    var iteration = story.get('Iteration');
                    var today_iso = Rally.util.DateTime.toIsoString(new Date());
                    var release_end = story.get('Feature').Release.ReleaseDate;
                                        
                    if ( iteration ) {
                        me.logger.log('compare ',iteration.EndDate,' <=? ',release_end , story.get('FormattedID'));
                        me.logger.log(' and ', iteration.StartDate, ' >? ', today_iso );
                    }
                    
                    if ( iteration && iteration.StartDate > today_iso && iteration.EndDate <= release_end ) {
                        me.logger.log('--');
                        points = points + record_points;
                    }
                });
                
                return points;
            }},
            { text: "Unplanned Points", align: "right", renderer: function(value,meta_data,record){
                if ( !record.get('_stories_not_done') ) {
                    return "N/A";
                }
                var points = 0;
                Ext.Array.each( record.get('_stories_not_done'), function(story) {
                    var record_points = story.get('PlanEstimate') || 0;
                    var iteration = story.get('Iteration');
                    var today_iso = Rally.util.DateTime.toIsoString(new Date());
                    var release_end = story.get('Feature').Release.ReleaseDate;

                    if ( ! iteration || iteration.StartDate < today_iso || iteration.EndDate > release_end) {
                        points = points + record_points;
                    }
                });
                
                return points;
            }}
        ]
        
        this.grid = this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            sortableColumns: false,
            showRowActionsColumn: false,
            columnCfgs: this.columns,
            listeners: {
                itemclick: function(view, record, item, index, evt) {
                    var column_index = view.getPositionByEvent(evt).column;
                    this.showDetailPopup(record, column_index);
                },
                scope : this
            }
        });
        
        this.down('#csv_button').setDisabled(false);
    },
    _getStoriesByFeature: function(stories) {
        var stories_by_feature = {};
        
        Ext.Array.each(stories,function(story){
            var feature = story.get('Feature').FormattedID;
            if ( !stories_by_feature[feature] ) {
                stories_by_feature[feature] = [];
            }
            stories_by_feature[feature].push(story);
        });
        return stories_by_feature;
    },
    
    _calculate: function(features,stories_by_feature){
        this.logger.log("features:",features);
        this.logger.log("stories:", stories_by_feature);
        Ext.Array.each(features, function(feature) {
            var stories = stories_by_feature[feature.get('FormattedID')];
            feature.set('_stories', stories);
            feature.set('_stories_done', this._getDoneStories(stories));
            feature.set('_stories_not_done', this._getNotDoneStories(stories));
            
        },this);
    },
    
    _getDoneStories: function(stories) {
        // stories that are accepted or completed
        var done_stories = [];
        var today_iso = Rally.util.DateTime.toIsoString(new Date());
        
        Ext.Array.each(stories, function(story) {
            var schedule_state = story.get('ScheduleState');
            var iteration = story.get('Iteration');
            // 
            var release_end = story.get('Feature').Release.ReleaseDate;
            var is_current_iteration = ( iteration && iteration.StartDate < today_iso && iteration.EndDate > today_iso );
            var is_iteration_inside_release = ( iteration && iteration.EndDate <= release_end );

            if (( schedule_state == "Accepted" || schedule_state == "Completed" ) || ( is_current_iteration && is_iteration_inside_release )) {
                done_stories.push(story);
            }
            
//            if (( schedule_state == "Accepted" || schedule_state == "Completed" ) || ( iteration && iteration.StartDate < today_iso && iteration.EndDate > today_iso )  ) {
//                done_stories.push(story);
//            }
        });
        return done_stories;
    },
    
    _getNotDoneStories: function(stories) {
        // stories that are accepted or completed
        var not_done_stories = [];
        var today_iso = Rally.util.DateTime.toIsoString(new Date());
        Ext.Array.each(stories, function(story) {
            var schedule_state = story.get('ScheduleState');
            var iteration = story.get('Iteration');
            // first, is it in the current iteration?
            var release_end = story.get('Feature').Release.ReleaseDate;
            var is_current_iteration = ( iteration && iteration.StartDate < today_iso && iteration.EndDate > today_iso );
            var is_iteration_inside_release = ( iteration && iteration.EndDate <= release_end );
            
            if (
                ( schedule_state != "Accepted" && schedule_state != "Completed" ) && 
                ( ! ( is_current_iteration && is_iteration_inside_release ) )
            ){
                not_done_stories.push(story);
            }  
        });
        return not_done_stories;
    },
    
    showDetailPopup: function(record, column_index) {
        var me = this;
        if ( column_index ==  1 || column_index > 2 ) {
            var stories = record.get('_stories');
            var title = "Stories for " + record.get('Name');
            
            var store = Ext.create('Rally.data.custom.Store', {
                data: stories
            });
            
            Ext.create('Rally.ui.dialog.Dialog', {
                id        : 'detailPopup',
                title     : title,
                width     : Ext.getBody().getWidth() - 25,
                height    : Ext.getBody().getHeight() - 25,
                closable  : true,
                layout    : 'fit',
                items     : [{
                    xtype                : 'rallygrid',
                    sortableColumns      : true,
                    showRowActionsColumn : false,
                    showPagingToolbar    : false,
                    columnCfgs           : [
                        {
                            dataIndex : 'FormattedID',
                            text: "id"
                        },
                        {
                            dataIndex : 'Name',
                            text: "Name",
                            flex: 1
                        },
                        {
                            dataIndex : 'Iteration',
                            text: "Iteration",
                            renderer: function(value,meta_data,record){
                                if ( value && value.Name ) {
                                    return value.Name;
                                }
                                return "";
                            }
                        },
                        {
                            dataIndex: 'ScheduleState',
                            text: "Schedule State"
                        },
                        {
                            dataIndex: 'PlanEstimate',
                            text: 'Points'
                        },
                        {
                            dataIndex: 'Project',
                            text: 'Team',
                            flex: 1,
                            renderer: function(value,meta_data,record){
                                if ( value && value.Name ) {
                                    return value.Name;
                                }
                                return "";
                            }
                        }
                    ],
                    store : store
                }]
            }).show();
        }
    },
    
    _exportToCSV: function() {
        this.setLoading(true);
        Rally.technicalservices.FileUtilities.getCSVFromGrid(this.grid).then({
            scope: this,
            success: function(csv) {
                this.setLoading(false);
                Rally.technicalservices.FileUtilities.saveTextAsFile(csv, 'export.csv',{type:'text/csv;charset=utf-8'})
            }
        });
    }
    
});

            
               Rally.launchApp('ReleasePlanningSummary', {
                   name: 'Release Planning Summary'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-column-header-align-right .x-column-header-text {
    margin-right: 0px;
}

    </style>

</head>
<body></body>
</html>